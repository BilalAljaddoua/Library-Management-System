using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Diagnostics;
using GeneratSettings;
using Microsoft.Data.SqlClient;
//Because the code is automatically generated by my own Code Generator, press (ctrl + K + D) to organize the code .    
//For More Detailes Visit My Account On GitHub : https://github.com/BilalAljaddoua . (-; 
/// <summary>
/// Provides data access methods for managing Borrowing in the database.
/// </summary>
namespace DataAccessLayer
{
    /// <summary>
    /// Represents a Borrowin data transfer object (DTO) for transferring Borrowin information.
    /// </summary>
    public class clsBorrowingDTO
    {
        public enum enMode { AddNew = 0, Update = 1 };
         enMode Mode { set; get; }

        public int? RecordID { set; get; }
        public int? PatronID { set; get; }
        public int? BookID { set; get; }
        public DateTime? borrowingDate { set; get; }
        public DateTime? ReturnDate { set; get; }


        /// <summary>
        /// Initializes a new instance of the <see cref="clsBorrowingDTO"/> class with specified properties.
        /// </summary>
        public clsBorrowingDTO(int? RecordID, int? PatronID, int? BookID, DateTime? borrowingDate, DateTime? ReturnDate)
        {
            this.RecordID = RecordID;
            this.PatronID = PatronID;
            this.BookID = BookID;
            this.borrowingDate = borrowingDate;
            this.ReturnDate = ReturnDate;
        }
    }
    public class clsBorrowingData
    {
        /// <summary>
        /// Logs an error to the Windows Event Log with the specified method name and exception details.
        /// </summary>
        /// <param name="methodName">The name of the method where the error occurred.</param>
        /// <param name="ex">The exception that was thrown.</param>
        static void LogError(string methodName, Exception ex)
        {
            string source = "Library ";
            string logName = "Application";

            if (!EventLog.SourceExists(source))
            {
                EventLog.CreateEventSource(source, logName);
            }

            EventLog.WriteEntry(source, $"Error in " + methodName + ":" + ex.Message, EventLogEntryType.Error);
        }
        /// <summary>
        /// Retrieves all Borrowing from the database.
        /// </summary>
        /// <returns>A list of <see cref="clsBorrowingDTO"/> objects representing all Borrowing.</returns>
        public static List<clsBorrowingDTO> GetAllBorrowing()
        {
            var BorrowingList = new List<clsBorrowingDTO>();
            using (SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString))
            {
                using (SqlCommand command = new SqlCommand("SP_SelectFormBorrowingTable", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    try
                    {
                        connection.Open();
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                BorrowingList.Add(new clsBorrowingDTO(
                                      Convert.ToInt32(reader["RecordID"]),
                                      Convert.ToInt32(reader["PatronID"]),
                                      Convert.ToInt32(reader["BookID"]),
                                      Convert.ToDateTime(reader["borrowingDate"]),
                                      Convert.ToDateTime(reader["ReturnDate"])));
                            }
                        }
                    }
                    catch (Exception ex) { LogError("GetAll Method", ex); }

                    return BorrowingList;
                }
            }
        }/// <summary>
         /// Finds a Borrowing by their unique RecordID.
         /// </summary>
         /// <param name="RecordID">The unique identifier for the Borrowin.</param>
         /// <returns>A <see cref="clsBorrowingDTO"/> object if the Borrowin is found, otherwise null.</returns>
        static public clsBorrowingDTO FindByRecordID(int RecordID)
        {
            clsBorrowingDTO BorrowingDTO = null;
            using (SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString))
            {
                using (SqlCommand command = new SqlCommand("SP_FindFormBorrowingTable", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@RecordID", RecordID);
                    try
                    {
                        connection.Open();
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                BorrowingDTO = new clsBorrowingDTO(
                                      Convert.ToInt32(reader["RecordID"]),
                                      Convert.ToInt32(reader["PatronID"]),
                                      Convert.ToInt32(reader["BookID"]),
                                      Convert.ToDateTime(reader["borrowingDate"]),
                                      Convert.ToDateTime(reader["ReturnDate"]));
                            }
                        }
                    }
                    catch (Exception ex) { LogError("Find Method", ex); }

                    return BorrowingDTO;
                }
            }
        }
        /// <summary>
        /// Adds a new Borrowin to the database.
        /// </summary>
        /// <param name="BorrowingDTO">The <see cref="clsBorrowingDTO"/> object containing Borrowing information.</param>
        /// <returns>The RecordID of the newly added Borrowin, or null if the operation fails.</returns>
        static public int? AddToBorrowingTable(clsBorrowingDTO BorrowingDTO)
        {
            using (SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString))
            {
                using (SqlCommand command = new SqlCommand("SP_InsertIntoBorrowingTable", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@PatronID", BorrowingDTO.PatronID);
                    command.Parameters.AddWithValue("@BookID", BorrowingDTO.BookID);
                    command.Parameters.AddWithValue("@borrowingDate", BorrowingDTO.borrowingDate);
                    command.Parameters.AddWithValue("@ReturnDate", BorrowingDTO.ReturnDate);

                    SqlParameter parameter = new SqlParameter("@RecordID", SqlDbType.Int)
                    {
                        Direction = ParameterDirection.Output
                    };
                    command.Parameters.Add(parameter);
                    int? RecordID = null;
                    try
                    {
                        connection.Open();
                        command.ExecuteNonQuery();
                        RecordID = (int)command.Parameters["@RecordID"].Value;
                    }
                    catch (Exception ex) { LogError("AddNew Method", ex); }

                    return RecordID;
                }
            }
        }

        /// <summary>
        /// Updates an existing Borrowin's information in the database.
        /// </summary>
        /// <param name="BorrowingDTO">The <see cref="clsBorrowingDTO"/> object containing updated Borrowin information.</param>
        /// <returns>True if the update is successful, otherwise false.</returns>
        static public bool UpdateBorrowingTable(clsBorrowingDTO BorrowingDTO)
        {
            using (SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString))
            {
                using (SqlCommand command = new SqlCommand("SP_UpdateBorrowingTable", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@RecordID", BorrowingDTO.RecordID);
                    command.Parameters.AddWithValue("@PatronID", BorrowingDTO.PatronID);
                    command.Parameters.AddWithValue("@BookID", BorrowingDTO.BookID);
                    command.Parameters.AddWithValue("@borrowingDate", BorrowingDTO.borrowingDate);
                    command.Parameters.AddWithValue("@ReturnDate", BorrowingDTO.ReturnDate);

                    SqlParameter parameter = new SqlParameter("@IsSuccess", SqlDbType.Bit)
                    {
                        Direction = ParameterDirection.Output
                    };
                    command.Parameters.Add(parameter);
                    bool IsSuccess = false;
                    try
                    {
                        connection.Open();
                        command.ExecuteNonQuery();
                        IsSuccess = (bool)command.Parameters["@IsSuccess"].Value;
                    }
                    catch (Exception ex) { LogError("Update Method", ex); }


                    return IsSuccess;
                }
            }
        }

        /// <summary>
        /// Deletes a Borrowin from the database based on their RecordID.
        /// </summary>
        /// <param name="RecordID">The unique identifier for the Borrowin to delete.</param>
        /// <returns>True if the deletion is successful, otherwise false.</returns>
        static public bool DeleteBorrowing(int RecordID)
        {
            using (SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString))
            {
                using (SqlCommand command = new SqlCommand("SP_DeleteFormBorrowingTable", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    command.Parameters.AddWithValue("@RecordID", RecordID);
                    SqlParameter parameter = new SqlParameter("@IsSuccess", SqlDbType.Bit)
                    {
                        Direction = ParameterDirection.Output
                    };
                    command.Parameters.Add(parameter);
                    bool IsSuccess = false;
                    try
                    {
                        connection.Open();
                        command.ExecuteNonQuery();
                        IsSuccess = (bool)command.Parameters["@IsSuccess"].Value;
                    }
                    catch (Exception ex) { LogError("Delete Method", ex); }

                    return IsSuccess;
                }
            }
        }

    }
}

