using System;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using GeneratSettings;
using Microsoft.Data.SqlClient;
//Because the code is automatically generated by my own Code Generator, press (ctrl + K + D) to organize the code .    
//For More Detailes Visit My Account On GitHub : https://github.com/BilalAljaddoua . (-; 
/// Provides data access methods for managing Patron in the database.
/// </summary>
namespace DataAccessLayer
{
    /// <summary>
    /// Represents a Patro data transfer object (DTO) for transferring Patro information.
    /// </summary>
    public class clsPatronDTO
    {
        public enum enMode { AddNew = 0, Update = 1 };
        enMode Mode { set; get; }

        public int? ID { set; get; }
        public string Name { set; get; }
        public string Email { set; get; }
        public string PhoneNumber { set; get; }


        /// <summary>
        /// Initializes a new instance of the <see cref="clsPatronDTO"/> class with specified properties.
        /// </summary>
        public clsPatronDTO(int? ID, string Name, string Email, string PhoneNumber)
        {
            this.ID = ID;
            this.Name = Name;
            this.Email = Email;
            this.PhoneNumber = PhoneNumber;
        }
    }
    public class clsPatronData
    {
        /// <summary>
        /// Logs an error to the Windows Event Log with the specified method name and exception details.
        /// </summary>
        /// <param name="methodName">The name of the method where the error occurred.</param>
        /// <param name="ex">The exception that was thrown.</param>
        static void LogError(string methodName, Exception ex)
        {
            string source = "Library ";
            string logName = "Application";

            if (!EventLog.SourceExists(source))
            {
                EventLog.CreateEventSource(source, logName);
            }

            EventLog.WriteEntry(source, $"Error in " + methodName + ":" + ex.Message, EventLogEntryType.Error);
        }
        /// <summary>
        /// Retrieves all Patron from the database.
        /// </summary>
        /// <returns>A list of <see cref="clsPatronDTO"/> objects representing all Patron.</returns>
        public static List<clsPatronDTO> GetAllPatron()
        {
            var PatronList = new List<clsPatronDTO>();
            using (SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString))
            {
                using (SqlCommand command = new SqlCommand("SP_SelectFormPatronTable", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    try
                    {
                        connection.Open();
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                PatronList.Add(new clsPatronDTO(
                                      Convert.ToInt32(reader["ID"]),
                                      Convert.ToString(reader["Name"]),
                                      Convert.ToString(reader["Email"]),
                                      Convert.ToString(reader["PhoneNumber"])));
                            }
                        }
                    }
                    catch (Exception ex) { LogError("GetAll Method", ex); }

                    return PatronList;
                }
            }
        }/// <summary>
         /// Finds a Patron by their unique ID.
         /// </summary>
         /// <param name="ID">The unique identifier for the Patro.</param>
         /// <returns>A <see cref="clsPatronDTO"/> object if the Patro is found, otherwise null.</returns>
        static public clsPatronDTO FindByID(int ID)
        {
            clsPatronDTO PatronDTO = null;
            using (SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString))
            {
                using (SqlCommand command = new SqlCommand("SP_FindFormPatronTable", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@ID", ID);
                    try
                    {
                        connection.Open();
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                PatronDTO = new clsPatronDTO(
                                      Convert.ToInt32(reader["ID"]),
                                      Convert.ToString(reader["Name"]),
                                      Convert.ToString(reader["Email"]),
                                      Convert.ToString(reader["PhoneNumber"]));
                            }
                        }
                    }
                    catch (Exception ex) { LogError("Find Method", ex); }

                    return PatronDTO;
                }
            }
        }
        /// <summary>
        /// Adds a new Patro to the database.
        /// </summary>
        /// <param name="PatronDTO">The <see cref="clsPatronDTO"/> object containing Patron information.</param>
        /// <returns>The ID of the newly added Patro, or null if the operation fails.</returns>
        static public int? AddToPatronTable(clsPatronDTO PatronDTO)
        {
            using (SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString))
            {
                using (SqlCommand command = new SqlCommand("SP_InsertIntoPatronTable", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@Name", PatronDTO.Name);
                    command.Parameters.AddWithValue("@Email", PatronDTO.Email);
                    command.Parameters.AddWithValue("@PhoneNumber", PatronDTO.PhoneNumber);

                    SqlParameter parameter = new SqlParameter("@ID", SqlDbType.Int)
                    {
                        Direction = ParameterDirection.Output
                    };
                    command.Parameters.Add(parameter);
                    int? ID = null;
                    try
                    {
                        connection.Open();
                        command.ExecuteNonQuery();
                        ID = (int)command.Parameters["@ID"].Value;
                    }
                    catch (Exception ex) { LogError("AddNew Method", ex); }

                    return ID;
                }
            }
        }

        /// <summary>
        /// Updates an existing Patro's information in the database.
        /// </summary>
        /// <param name="PatronDTO">The <see cref="clsPatronDTO"/> object containing updated Patro information.</param>
        /// <returns>True if the update is successful, otherwise false.</returns>
        static public bool UpdatePatronTable(clsPatronDTO PatronDTO)
        {
            using (SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString))
            {
                using (SqlCommand command = new SqlCommand("SP_UpdatePatronTable", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@ID", PatronDTO.ID);
                    command.Parameters.AddWithValue("@Name", PatronDTO.Name);
                    command.Parameters.AddWithValue("@Email", PatronDTO.Email);
                    command.Parameters.AddWithValue("@PhoneNumber", PatronDTO.PhoneNumber);

                    SqlParameter parameter = new SqlParameter("@IsSuccess", SqlDbType.Bit)
                    {
                        Direction = ParameterDirection.Output
                    };
                    command.Parameters.Add(parameter);
                    bool IsSuccess = false;
                    try
                    {
                        connection.Open();
                        command.ExecuteNonQuery();
                        IsSuccess = (bool)command.Parameters["@IsSuccess"].Value;
                    }
                    catch (Exception ex) { LogError("Update Method", ex); }


                    return IsSuccess;
                }
            }
        }

        /// <summary>
        /// Deletes a Patro from the database based on their ID.
        /// </summary>
        /// <param name="ID">The unique identifier for the Patro to delete.</param>
        /// <returns>True if the deletion is successful, otherwise false.</returns>
        static public bool DeletePatron(int ID)
        {
            using (SqlConnection connection = new SqlConnection(clsDataAccessSettings.ConnectionString))
            {
                using (SqlCommand command = new SqlCommand("SP_DeleteFormPatronTable", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    command.Parameters.AddWithValue("@ID", ID);
                    SqlParameter parameter = new SqlParameter("@IsSuccess", SqlDbType.Bit)
                    {
                        Direction = ParameterDirection.Output
                    };
                    command.Parameters.Add(parameter);
                    bool IsSuccess = false;
                    try
                    {
                        connection.Open();
                        command.ExecuteNonQuery();
                        IsSuccess = (bool)command.Parameters["@IsSuccess"].Value;
                    }
                    catch (Exception ex) { LogError("Delete Method", ex); }

                    return IsSuccess;
                }
            }
        }

    }
}

