using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using DataAccessLayer;
//Because the code is automatically generated by my own Code Generator, press (ctrl + K + D) to organize the code .    
//For More Detailes Visit My Account On GitHub : https://github.com/BilalAljaddoua . (-; 
namespace Bussiness_Layer
{
    public class clsPatron
    {

        /// <summary>
        /// Enumeration representing the mode of the operation (Add or Update).
        /// </summary>
        public enum enMode { AddNew = 0, Update = 1 };

        /// <summary>
        /// Gets or sets the mode of the operation (AddNew or Update).
        /// </summary>
          enMode Mode { set; get; }
        public int? ID { set; get; }
        public string Name { set; get; }
        public string Email { set; get; }
        public string PhoneNumber { set; get; }

        /// <summary>
        /// Gets the Data Transfer Object (DTO) representing the current Patro.
        /// </summary>
        public clsPatronDTO PDTO
        {
            get
            {
                return new clsPatronDTO(
                   this.ID,
                   this.Name,
                   this.Email,
                   this.PhoneNumber);
            }
        }
        /// <summary>
        /// Represents a business layer class for managing Patro operations and interactions.
        /// </summary>
        public clsPatron(clsPatronDTO PatronDTO, enMode nMode = enMode.AddNew)
        {
            this.ID = PatronDTO.ID;
            this.Name = PatronDTO.Name;
            this.Email = PatronDTO.Email;
            this.PhoneNumber = PatronDTO.PhoneNumber;
            this.Mode = nMode;
        }
        /// <summary>
        /// Adds a new Patro to the database.
        /// </summary>
        /// <returns>True if the Patro was added successfully; otherwise, false.</returns>
        private bool _AddPatron()
        {
            this.ID = clsPatronData.AddToPatronTable(PDTO);
            return (this.ID != null);
        }
        /// <summary>
        /// Retrieves all Patron from the database.
        /// </summary>
        /// <returns>A list of <see cref="clsPatronDTO"/> objects representing all Patron.</returns>
        static public List<clsPatronDTO> GetAllPatron()
        {
            return clsPatronData.GetAllPatron();
        }
        /// <summary>
        /// Updates an existing Patro's information in the database.
        /// </summary>
        /// <returns>True if the update was successful; otherwise, false.</returns>
        private bool _UpdatePatron()
        {
            return clsPatronData.UpdatePatronTable(PDTO);
        }
        /// <summary>
        /// Finds a Patron by their ID.
        /// </summary>
        /// <param name="ID">The unique identifier for the Patro.</param>
        /// <returns>A <see cref="clsPatron"/> object if the Patro is found; otherwise, null.</returns>
        static public clsPatron FindByID(int ID)
        {
            var Patro = clsPatronData.FindByID(ID);
            if (Patro != null)
            {
                return new clsPatron(Patro, enMode.Update);
            }
            else
                return null;
        }

        /// <summary>
        /// Deletes a Patro from the database based on their ID
        /// </summary>
        /// <param name="ID">The unique identifier for the Patro to delete.</param>
        /// <returns>True if the deletion was successful; otherwise, false.</returns>
        public static bool DeletePatron(int ID)
        {
            return clsPatronData.DeletePatron(ID);
        }
        /// <summary>
        /// Saves the current User record in the database based on the specified mode.
        /// </summary>
        /// <returns>True if the operation is successful; otherwise, false.</returns>
        public bool Save()
        {
            switch (Mode)
            {
                case enMode.AddNew:
                    if (_AddPatron())
                    {
                        Mode = enMode.Update;
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                case enMode.Update:                    return _UpdatePatron();

            }

            return false;
        }
    }
}

